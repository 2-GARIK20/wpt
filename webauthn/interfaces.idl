[SecureContext]
interface PublicKeyCredential : Credential {
    readonly attribute ArrayBuffer           rawId;
    readonly attribute AuthenticatorResponse response;
    readonly attribute AuthenticationExtensions clientExtensionResults;
};

partial dictionary CredentialRequestOptions {
    PublicKeyCredentialRequestOptions? publicKey;
};

partial dictionary CredentialCreationOptions {
    MakeCredentialOptions? publicKey;
};

[SecureContext]
interface AuthenticatorResponse {
    readonly attribute ArrayBuffer clientDataJSON;
};

[SecureContext]
interface AuthenticatorAttestationResponse : AuthenticatorResponse {
    readonly attribute ArrayBuffer attestationObject;
};

[SecureContext]
interface AuthenticatorAssertionResponse : AuthenticatorResponse {
    readonly attribute ArrayBuffer      authenticatorData;
    readonly attribute ArrayBuffer      signature;
};

dictionary PublicKeyCredentialParameters {
    required PublicKeyCredentialType  type;
    required AlgorithmIdentifier   algorithm;
};

dictionary PublicKeyCredentialUserEntity : PublicKeyCredentialEntity {
    DOMString displayName;
};

dictionary MakeCredentialOptions {
    required PublicKeyCredentialEntity rp;
    required PublicKeyCredentialUserEntity user;

    required BufferSource                         challenge;
    required sequence<PublicKeyCredentialParameters> parameters;

    unsigned long                        timeout;
    sequence<PublicKeyCredentialDescriptor> excludeList;
    AuthenticatorSelectionCriteria       authenticatorSelection;
    AuthenticationExtensions             extensions;
};

dictionary PublicKeyCredentialEntity {
    DOMString id;
    DOMString name;
    USVString icon;
};

dictionary AuthenticatorSelectionCriteria {
    Attachment    attachment;
    boolean       requireResidentKey = false;
};

enum Attachment {
    "platform",
    "cross-platform"
};

dictionary PublicKeyCredentialRequestOptions {
    required BufferSource                challenge;
    unsigned long                        timeout;
    USVString                            rpId;
    sequence<PublicKeyCredentialDescriptor> allowList = [];
    AuthenticationExtensions             extensions;
};

typedef record<DOMString, any> AuthenticationExtensions;

dictionary CollectedClientData {
    required DOMString           challenge;
    required DOMString           origin;
    required DOMString           hashAlg;
    DOMString                    tokenBinding;
    AuthenticationExtensions     clientExtensions;
    AuthenticationExtensions     authenticatorExtensions;
};

enum PublicKeyCredentialType {
    "public-key"
};

dictionary PublicKeyCredentialDescriptor {
    required PublicKeyCredentialType type;
    required BufferSource id;
    sequence<Transport>   transports;
};

enum Transport {
    "usb",
    "nfc",
    "ble"
};

typedef sequence<AAGUID> AuthenticatorSelectionList;

typedef BufferSource AAGUID;